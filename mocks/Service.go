// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import api "github.com/mochammadshenna/clean-architecture/service/api"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: ctx, req
func (_m *Service) CreateBook(ctx context.Context, req api.CreateBookRequest) (*api.CreateBookResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.CreateBookResponse
	if rf, ok := ret.Get(0).(func(context.Context, api.CreateBookRequest) *api.CreateBookResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CreateBookResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.CreateBookRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: ctx, req
func (_m *Service) GetBook(ctx context.Context, req api.GetBookRequest) (*api.GetBookResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *api.GetBookResponse
	if rf, ok := ret.Get(0).(func(context.Context, api.GetBookRequest) *api.GetBookResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.GetBookResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.GetBookRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
